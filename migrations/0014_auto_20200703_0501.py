# Generated by Django 2.2.12 on 2020-07-03 05:01

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ('gwml2', '0013_auto_20200703_0421'),
    ]

    operations = [
        migrations.CreateModel(
            name='ChemicalType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ConstituentRelationType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GWBiologicConstituent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='GWBodyPropertyType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='GWChemicalConstituent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gw_chemical', models.ForeignKey(blank=True, help_text='Chemical component type, e.g. arsenic.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.ChemicalType', verbose_name='gwChemical')),
            ],
        ),
        migrations.CreateModel(
            name='GWConstituent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gw_biologic_constituent', models.ForeignKey(blank=True, help_text='A biologic constituent is a type of fluid body constituent, e.g. organisms.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.GWBiologicConstituent', verbose_name='GWBiologicConstituent')),
                ('gw_chemical_constituent', models.ForeignKey(blank=True, help_text='A chemical constituent is a type of fluid body constituent, e.g. arsenic.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.GWChemicalConstituent', verbose_name='GWChemicalConstituent')),
                ('gw_concentration', models.OneToOneField(blank=True, help_text='The concentration (with uom) of the constituent in the fluid body.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='gw_concentration', to='gwml2.Quantity', verbose_name='gwConcentration')),
            ],
        ),
        migrations.CreateModel(
            name='GWMixture',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='MaterialType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MechanismType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='MixtureType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='OrganismType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='StateType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='SurfaceType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='gwfluidbody',
            name='gw_body_flow',
            field=models.ManyToManyField(blank=True, help_text='Flows associated with the fluid body.', null=True, to='gwml2.GWFlow', verbose_name='gwBodyFlow'),
        ),
        migrations.AddField(
            model_name='gwfluidbody',
            name='gw_part_of_body',
            field=models.ForeignKey(blank=True, help_text='Relates a void and a fluid body contained by.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.GWFluidBody'),
        ),
        migrations.CreateModel(
            name='GWMixtureConstituent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gw_constituent', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gwml2.GWConstituent', verbose_name='GW_Constituent')),
                ('gw_mixture', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='gwml2.GWMixture', verbose_name='GW_Mixture')),
            ],
        ),
        migrations.AddField(
            model_name='gwmixture',
            name='gw_mixture',
            field=models.ForeignKey(help_text='The manner in which a constituent is within a fluid body, e.g. solution, suspension, emulsion, precipitate, colloidal.', on_delete=django.db.models.deletion.CASCADE, to='gwml2.MixtureType', verbose_name='gwMixture'),
        ),
        migrations.CreateModel(
            name='GWMaterialConstituent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gw_material', models.ForeignKey(blank=True, help_text='Name of the suspended or colloid material in the fluid body, e.g. a lithology or mineral name.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.MaterialType', verbose_name='gwMaterial')),
            ],
        ),
        migrations.CreateModel(
            name='GWFluidBodySurface',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gw_surface_shape', django.contrib.gis.db.models.fields.GeometryField(blank=True, help_text='Geometry / position of the surface.', null=True, srid=4326, verbose_name='gwSurfaceShape')),
                ('gw_surface_divide', models.ManyToManyField(blank=True, help_text='Relates a fluid body surface to a line on e.g. a water table or piezometric surface, on either side of which the groundwater flow diverges.', null=True, to='gwml2.GWDivide', verbose_name='gwSurfaceDivide')),
                ('gw_surface_metadata', models.ForeignKey(blank=True, help_text='The observation or calculation of the surface.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.OMObservation', verbose_name='gwSurfaceMetadata')),
                ('gw_surface_type', models.ForeignKey(blank=True, help_text='Type of fluid body property, e.g. age, temperature, density, viscosity, turbidity, color, hardness, acidity, etc..', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.SurfaceType', verbose_name='gwSurfaceType')),
            ],
        ),
        migrations.CreateModel(
            name='GWFluidBodyProperty',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gw_body_property', models.ForeignKey(blank=True, help_text='Type of fluid body property, e.g. age, temperature, density, viscosity, turbidity, color, hardness, acidity, etc..', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.GWBodyPropertyType', verbose_name='gwBodyProperty')),
                ('gw_body_property_value', models.ForeignKey(blank=True, help_text='Value of the fluid body property (with uom).', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.Quantity', verbose_name='gwBodyPropertyValue')),
            ],
        ),
        migrations.CreateModel(
            name='GWConstituentRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('gw_constituent_relation_type', models.ForeignKey(blank=True, help_text='Specific type of relation between fluid body components, e.g. coating, constitution, aggregation, containment.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.ConstituentRelationType', verbose_name='gwConstituentRelationType')),
                ('gw_constitution_relation_mechanism', models.ForeignKey(blank=True, help_text='Mechanisms by which materials (of various states) come into a relationship, e.g. sorption, precipitation, digestion, excretion, etc.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.MechanismType', verbose_name='gwConstitutionRelationMechanism')),
            ],
        ),
        migrations.AddField(
            model_name='gwconstituent',
            name='gw_constituent_relation',
            field=models.ManyToManyField(blank=True, help_text='A general binary relation between constituents, in which the relation type can be specified in addition to the causal mechanism that caused the relationship.', null=True, to='gwml2.GWConstituentRelation', verbose_name='GWConstituentRelation'),
        ),
        migrations.AddField(
            model_name='gwconstituent',
            name='gw_material_constituent',
            field=models.ForeignKey(blank=True, help_text='A material constituent is a type of fluid body constituent, e.g. sediment.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.GWMaterialConstituent', verbose_name='GWMaterialConstituent'),
        ),
        migrations.AddField(
            model_name='gwconstituent',
            name='gw_state',
            field=models.ForeignKey(blank=True, help_text='The physical state of the constituent, i.e. solid, liquid, or gas.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.StateType', verbose_name='gwState'),
        ),
        migrations.AddField(
            model_name='gwbiologicconstituent',
            name='gw_organism',
            field=models.ForeignKey(blank=True, help_text='Biological species.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.OrganismType', verbose_name='gwOrganism'),
        ),
        migrations.AddField(
            model_name='gwbiologicconstituent',
            name='gw_state',
            field=models.ForeignKey(blank=True, help_text='Organisms are always solids.', null=True, on_delete=django.db.models.deletion.SET_NULL, to='gwml2.StateType', verbose_name='gwState'),
        ),
        migrations.AddField(
            model_name='gwfluidbody',
            name='gw_background_constituent',
            field=models.ManyToManyField(help_text='Relates a fluid body to typical background constituent values for that body.', to='gwml2.GWConstituent', verbose_name='gwBackgroundConstituent'),
        ),
        migrations.AddField(
            model_name='gwfluidbody',
            name='gw_body_constituent',
            field=models.ManyToManyField(help_text='Relates a fluid body to its chemical, biologic, or material constituents, and specifies the nature of the mixture of the constituent within the body, e.g. solution, suspension.', to='gwml2.GWMixtureConstituent', verbose_name='gwBodyConstituent'),
        ),
        migrations.AddField(
            model_name='gwfluidbody',
            name='gw_body_property',
            field=models.ManyToManyField(help_text='The property of fluid body.', to='gwml2.GWFluidBodyProperty', verbose_name='gwBodyProperty'),
        ),
        migrations.AddField(
            model_name='gwfluidbody',
            name='gw_body_surface',
            field=models.ManyToManyField(help_text='Relates a fluid body to a surface hosted by the body, e.g. the top of the water table.', to='gwml2.GWFluidBodySurface', verbose_name='gwBodySurface'),
        ),
    ]
